@page "/"
@inject IAuthenticationService AuthService

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>Hello @context.User.Identity.Name</p>
        <button @onclick="logout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <Login/>
    </NotAuthorized>
</AuthorizeView>

@code {

    private void logout()
    {
        AuthService.Logout();
    }

 
/*
    private async Task SaveUser()
    {

        AuthenticationUserModel authenticationUserModel = new AuthenticationUserModel
        {
            Username = this.Username,
            Password = this.Password
        };
        
        await sessionStorage.SetItemAsync(keyAdd, authenticationUserModel);
        await GetUserDetailsFromSessionStorage();
        await GetSessionStorageLength();
    }
    
    private async Task RemoveUser()
    {
        await sessionStorage.RemoveItemAsync(keyRemove);
        await GetUserDetailsFromSessionStorage();
        await GetSessionStorageLength();
    }

    private async Task ClearSessionStorage()
    {
        await sessionStorage.ClearAsync();
        await GetUserDetailsFromSessionStorage();
        await GetSessionStorageLength();
    }

    private async Task GetUserDetailsFromSessionStorage()
    {
        AuthenticationUserModel authenticationUserModel = await sessionStorage.GetItemAsync<AuthenticationUserModel>("user");

        try
        {
            UsernameFromSessionStorage = authenticationUserModel.Username;
            PasswordFromSessionStorage = authenticationUserModel.Password;
        }
        catch (Exception e)
        {
            UsernameFromSessionStorage = "No username is in Session";
            PasswordFromSessionStorage = "No username is in Session";
        }

    }
    
    private async Task GetSessionStorageLength()
    {
        Console.WriteLine(await sessionStorage.LengthAsync());
        ItemInSessionStorage = await sessionStorage.LengthAsync();
    }*/

}